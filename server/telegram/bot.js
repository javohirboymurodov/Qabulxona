require('dotenv').config({ path: require('path').join(__dirname, '..', '.env') });
const TelegramBot = require('node-telegram-bot-api');
const connectDB = require('../config/db');
const Employee = require('../models/Employee');
const NotificationService = require('./services/notificationService');

// Disable polling initially and use manual control
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { 
  polling: false // Completely disable auto-polling
});

// Initialize notification service
const notificationService = new NotificationService(bot);

// Global export for other modules
global.telegramNotificationService = notificationService;

// Connect to database
connectDB();

// Bot state
let isPolling = false;
let pollingRetries = 0;
const MAX_RETRIES = 3;
let pollingTimeout = null;

// In-memory map for callback tokens
const chatTaskTokenMap = new Map();

// Safe bot start function
// Clean bot start with comprehensive conflict resolution
async function startBotSafely() {
  if (isPolling) {
    console.log('‚ö†Ô∏è Bot is already running');
    return;
  }

  try {
    console.log('üîÑ Starting Telegram bot...');
    
    // Step 1: Test bot token
    const me = await bot.getMe();
    console.log(`ü§ñ Bot verified: @${me.username}`);
    
    // Step 2: Force clean any webhooks
    try {
      await bot.deleteWebHook({ drop_pending_updates: true });
      console.log('‚úÖ Webhooks cleared');
    } catch (err) {
      console.log('‚ö†Ô∏è Webhook clear failed (might be OK):', err.message);
    }
    
    // Step 3: Clear any pending updates
    try {
      const updates = await bot.getUpdates({ timeout: 1, limit: 100 });
      if (updates && updates.length > 0) {
        const lastId = updates[updates.length - 1].update_id;
        await bot.getUpdates({ offset: lastId + 1, timeout: 1 });
        console.log(`‚úÖ Cleared ${updates.length} pending updates`);
      }
    } catch (err) {
      console.log('‚ö†Ô∏è Update clear failed:', err.message);
    }
    
    // Step 4: Wait a bit to ensure clean state
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Step 5: Start polling with enhanced options
    await bot.startPolling({
      interval: 3000,
      params: {
        timeout: 10,
        allowed_updates: ['message', 'callback_query', 'inline_query']
      }
    });
    
    isPolling = true;
    pollingRetries = 0;
    console.log('üéâ Telegram bot started successfully!');
    
    // Initialize schedulers after successful start
    setTimeout(() => {
      try {
        const { initializeSchedulers } = require('./scheduler/reminderScheduler');
        initializeSchedulers();
        console.log('üìÖ Schedulers initialized');
      } catch (err) {
        console.log('‚ö†Ô∏è Scheduler init failed:', err.message);
      }
    }, 1000);
    
  } catch (error) {
    console.error('‚ùå Bot start failed:', error.message);
    isPolling = false;
    
    // Handle specific error types
    if (error.message.includes('409')) {
      console.log('üîÑ Conflict detected, waiting before retry...');
      
      if (pollingRetries < MAX_RETRIES) {
        pollingRetries++;
        const delay = Math.min(10000 * pollingRetries, 60000); // Max 1 minute
        console.log(`‚è≥ Retry ${pollingRetries}/${MAX_RETRIES} in ${delay/1000}s...`);
        
        pollingTimeout = setTimeout(() => {
          startBotSafely();
        }, delay);
      } else {
        console.error('üíî Max retries reached. Bot startup failed.');
        console.log('üí° Please check if another bot instance is running');
      }
    } else {
      console.error('üíî Bot startup failed with non-conflict error');
    }
  }
}

// Enhanced error handling
bot.on('polling_error', (error) => {
  console.error('üî¥ Polling error:', error.message);
  
  // Stop current polling
  isPolling = false;
  
  // Handle 409 conflicts more aggressively
  if (error.message.includes('409')) {
    console.log('üõë Stopping due to 409 conflict');
    
    try {
      bot.stopPolling();
    } catch (e) {
      console.log('‚ö†Ô∏è Stop polling failed:', e.message);
    }
    
    // Don't auto-restart on 409 to prevent loops
    console.log('üí° Not auto-restarting due to conflict. Manual intervention needed.');
    return;
  }
  
  // Auto-restart on other errors (with limit)
  if (pollingRetries < MAX_RETRIES) {
    console.log('üîÑ Attempting restart due to non-conflict error...');
    pollingRetries++;
    
    pollingTimeout = setTimeout(() => {
      startBotSafely();
    }, 5000);
  }
});

bot.on('error', (error) => {
  console.error('üî¥ Bot error:', error.message);
  if (error.message.includes('409')) {
    isPolling = false;
    console.log('üõë Bot disabled due to conflict');
  }
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('üõë Shutting down bot...');
  
  if (pollingTimeout) {
    clearTimeout(pollingTimeout);
  }
  
  if (isPolling) {
    try {
      await bot.stopPolling();
      console.log('‚úÖ Bot stopped');
    } catch (error) {
      console.log('‚ö†Ô∏è Stop error:', error.message);
    }
  }
  
  process.exit(0);
});

// Initialize bot after a delay to ensure server is ready
setTimeout(() => {
  console.log('üöÄ Initializing Telegram bot...');
  startBotSafely();
}, 3000);

// All your existing bot handlers remain the same...
// Start command handler
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const user = msg.from;
  
  console.log(`New user started bot: ${user.first_name} ${user.last_name} (@${user.username})`);
  
  try {
    // Check if user is already registered
    const existingEmployee = await Employee.findOne({ telegramId: chatId.toString() });
    
    if (existingEmployee) {
      // Ro'yxatdan o'tgan foydalanuvchini asosiy oynaga yo'naltiramiz
      bot.sendMessage(chatId, `
üè† **–ê—Å–æ—Å–∏–π –º–µ–Ω—é**

“ö—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:
      `, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª', callback_data: 'profile' }
            ],
            [
              { text: 'üìã –¢–æ—à—Ä–∏“õ–ª–∞—Ä', callback_data: 'task_history' },
              { text: 'üè¢ “ö–∞–±—É–ª–ª–∞—Ä', callback_data: 'receptions' }
            ],
            [
              { text: 'ü§ù –ú–∞–∂–ª–∏—Å–ª–∞—Ä', callback_data: 'meetings' },
              { text: '‚öôÔ∏è –°–æ–∑–ª–∞–º–∞–ª–∞—Ä', callback_data: 'settings' }
            ]
          ]
        }
      });
      return;
    }
    
    // Request phone number
    bot.sendMessage(chatId, `
üëã –ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º, ${user.first_name}!

“ö–∞–±—É–ª—Ö–æ–Ω–∞ –±–æ—Ç–∏–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑! 

üìù –†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à —É—á—É–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–∞“õ–∞–º–∏–Ω–∏ —é–±–æ—Ä–∏—à –∫–µ—Ä–∞–∫.

‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–∞“õ–∞–º–∏ —Å–∏—Å—Ç–µ–º–∞–¥–∞ —Ä—û–π—Ö–∞—Ç–≥–∞ –æ–ª–∏–Ω–≥–∞–Ω –±—û–ª–∏—à–∏ —à–∞—Ä—Ç!
    `, {
      reply_markup: {
        keyboard: [
          [{
            text: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–∞“õ–∞–º–∏–Ω–∏ —é–±–æ—Ä–∏—à',
            request_contact: true
          }]
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    });
    
  } catch (error) {
    console.error('Start command error:', error);
    bot.sendMessage(chatId, '‚ùå Xatolik yuz berdi. Iltimos qaytadan urinib ko\'ring.');
  }
});

// Handle contact sharing
bot.on('contact', async (msg) => {
  const chatId = msg.chat.id;
  const contact = msg.contact;
  
  console.log(`Contact received: ${contact.phone_number} from ${contact.first_name}`);
  
  try {
    // Check if the contact is the user themselves
    if (contact.user_id !== msg.from.id) {
      bot.sendMessage(chatId, '‚ùå Iltimos, o\'z telefon raqamingizni yuboring!');
      return;
    }
    
    // Find employee by phone number
    const employee = await Employee.findByTelegramPhone(contact.phone_number);
    
    if (!employee) {
      bot.sendMessage(chatId, `
‚ùå –ê—Ñ—Å—É—Å, —Å–∏–∑–Ω–∏–Ω–≥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ (${contact.phone_number}) —Å–∏—Å—Ç–µ–º–∞–¥–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.

üîç –ò—Ç–ª–∏–º–æ—Å, “õ—É–π–∏–¥–∞–≥–∏–ª–∞—Ä–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏–Ω–≥:
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–∞“õ–∞–º–∏ —Ç—û“ì—Ä–∏ –∫–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞–¥–∞ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω–º–∏—Å–∏–∑

üìû –ê–≥–∞—Ä –º—É–∞–º–º–æ –¥–∞–≤–æ–º “õ–∏–ª—Å–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥.
      `, {
        reply_markup: {
          remove_keyboard: true
        }
      });
      return;
    }
    
    // Check if employee already has telegram account linked
    if (employee.telegramId && employee.telegramId !== chatId.toString()) {
      bot.sendMessage(chatId, `
‚ö†Ô∏è –ë—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–∞“õ–∞–º–∏ –±–æ—à“õ–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–≥–∞–Ω.

–ê–≥–∞—Ä –±—É —Å–∏–∑–Ω–∏–Ω–≥ —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ –±—û–ª—Å–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥.
      `, {
        reply_markup: {
          remove_keyboard: true
        }
      });
      return;
    }
    
    // Link telegram account to employee
    employee.telegramId = chatId.toString();
    employee.telegramPhone = contact.phone_number;
    employee.isVerified = true;
    await employee.save();
    
    // Ro'yxatdan o'tgandan so'ng asosiy oynaga yo'naltiramiz
    bot.sendMessage(chatId, `
üè† **–ê—Å–æ—Å–∏–π –º–µ–Ω—é**

“ö—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:
    `, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª', callback_data: 'profile' }
          ],
          [
            { text: 'üìã –¢–æ—à—Ä–∏“õ–ª–∞—Ä', callback_data: 'task_history' },
            { text: 'üè¢ “ö–∞–±—É–ª–ª–∞—Ä', callback_data: 'receptions' }
          ],
          [
            { text: 'ü§ù –ú–∞–∂–ª–∏—Å–ª–∞—Ä', callback_data: 'meetings' },
            { text: '‚öôÔ∏è –°–æ–∑–ª–∞–º–∞–ª–∞—Ä', callback_data: 'settings' }
          ]
        ]
      }
    });
    
    console.log(`Employee registered: ${employee.name} (${employee.phone}) -> Telegram ID: ${chatId}`);
    
  } catch (error) {
    console.error('Contact handler error:', error);
    bot.sendMessage(chatId, '‚ùå Ro\'yxatdan o\'tishda xatolik yuz berdi. Qaytadan urinib ko\'ring.');
  }
});

// Profile command
bot.onText(/\/profile/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const employee = await Employee.findOne({ telegramId: chatId.toString() });
    
    if (!employee) {
      bot.sendMessage(chatId, '‚ùå Siz ro\'yxatdan o\'tmagan ekan. /start buyrug\'ini bosing.');
      return;
    }
    
    const activeTasks = employee.taskHistory.filter(task => task.status === 'pending').length;
    const completedTasks = employee.taskHistory.filter(task => task.status === 'completed').length;
    
    bot.sendMessage(chatId, `
üë§ **–®–∞—Ö—Å–∏–π –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä**

üìù **Ism:** ${employee.name}
üè¢ **–õ–∞–≤–æ–∑–∏–º:** ${employee.position}  
üèõÔ∏è **–ë—û–ª–∏–º:** ${employee.department}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${employee.phone}
‚è∞ **–ò—à —Å—Ç–∞–∂–∏:** ${employee.experience} yil
${employee.education ? `üéì **–¢–∞—ä–ª–∏–º:** ${employee.education}` : ''}

üìä **Topshiriqlar statistikasi:**
‚Ä¢ –§–∞–æ–ª —Ç–æ—à—Ä–∏“õ–ª–∞—Ä: ${activeTasks}
‚Ä¢ –ë–∞–∂–∞—Ä–∏–ª–≥–∞–Ω: ${completedTasks}
‚Ä¢ –ñ–∞–º–∏: ${employee.taskHistory.length}

üìÖ **–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω:** ${employee.createdAt.toLocaleDateString('uz-UZ')}
    `, {
      parse_mode: 'Markdown'
    });
    
  } catch (error) {
    console.error('Profile command error:', error);
    bot.sendMessage(chatId, '‚ùå Ma\'lumotlarni olishda xatolik yuz berdi.');
  }
});

// Tasks command
bot.onText(/\/tasks/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const employee = await Employee.findOne({ telegramId: chatId.toString() });
    
    if (!employee) {
      bot.sendMessage(chatId, '‚ùå –°–∏–∑ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–≥–∞–Ω—Å–∏–∑. /start –±—É–π—Ä—É“ì–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.');
      return;
    }
    
    const activeTasks = employee.taskHistory.filter(task => task.status === 'pending');
    
    if (activeTasks.length === 0) {
      bot.sendMessage(chatId, 'üìã –°–∏–∑–¥–∞ “≥–æ–∑–∏—Ä—á–∞ —Ñ–∞–æ–ª —Ç–æ—à—Ä–∏“õ–ª–∞—Ä –π—û“õ.');
      return;
    }
    
    let message = `üìã **–§–∞–æ–ª —Ç–æ—à—Ä–∏“õ–ª–∞—Ä (${activeTasks.length}):**\n\n`;
    
    activeTasks.forEach((task, index) => {
      const deadline = new Date(task.deadline);
      const daysLeft = Math.ceil((deadline - new Date()) / (1000 * 60 * 60 * 24));
      const priorityEmoji = task.priority === 'urgent' ? 'üî¥' : task.priority === 'high' ? 'üü°' : 'üü¢';
      
      message += `${index + 1}. ${priorityEmoji} **${task.description}**\n`;
      message += `   üìÖ –ú—É–¥–¥–∞—Ç: ${deadline.toLocaleDateString('uz-UZ')}\n`;
      message += `   ‚è∞ “ö–æ–ª–≥–∞–Ω: ${daysLeft > 0 ? `${daysLeft} kun` : 'Muddati o\'tgan'}\n`;
      message += `   üë§ –ö–∏–º –±–µ—Ä–∏–≥–∞–Ω: ${task.assignedBy}\n\n`;
    });
    
    bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown'
    });
    
  } catch (error) {
    console.error('Tasks command error:', error);
    bot.sendMessage(chatId, '‚ùå Topshiriqlarni olishda xatolik yuz berdi.');
  }
});

// History command
bot.onText(/\/history/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const employee = await Employee.findOne({ telegramId: chatId.toString() });
    
    if (!employee) {
      bot.sendMessage(chatId, '‚ùå –°–∏–∑ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–≥–∞–Ω—Å–∏–∑. /start –±—É–π—Ä—É“ì–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.');
      return;
    }
    
    if (employee.taskHistory.length === 0) {
      bot.sendMessage(chatId, 'üìã –¢–æ—à—Ä–∏“õ–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ –±—û—à.');
      return;
    }
    
    const recentTasks = employee.taskHistory
      .sort((a, b) => new Date(b.assignedAt) - new Date(a.assignedAt))
      .slice(0, 10); // So'nggi 10 ta topshiriq
    
    let message = `üìö **–°—û–Ω–≥–∏ —Ç–æ—à—Ä–∏“õ–ª–∞—Ä (${recentTasks.length}/${employee.taskHistory.length}):**\n\n`;
    
    recentTasks.forEach((task, index) => {
      const statusEmoji = task.status === 'completed' ? '‚úÖ' : task.status === 'overdue' ? '‚ùå' : '‚è≥';
      const assignedDate = new Date(task.assignedAt);
      
      message += `${index + 1}. ${statusEmoji} **${task.description}**\n`;
      message += `   üìÖ –ë–µ—Ä–∏–ª–≥–∞–Ω: ${assignedDate.toLocaleDateString('uz-UZ')}\n`;
      message += `   üìä –•–æ–ª–∞—Ç: ${task.status === 'completed' ? '–ë–∞–∂–∞—Ä–∏–ª–≥–∞–Ω' : task.status === 'overdue' ? '–ú—É–¥–¥–∞—Ç–∏ —û—Ç–≥–∞–Ω' : '–ñ–∞—Ä–∞—ë–Ω–¥–∞'}\n`;
      if (task.completedAt) {
        message += `   ‚úÖ –ë–∞–∂–∞—Ä–∏–ª–≥–∞–Ω: ${new Date(task.completedAt).toLocaleDateString('uz-UZ')}\n`;
      }
      message += '\n';
    });
    
    bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown'
    });
    
  } catch (error) {
    console.error('History command error:', error);
    bot.sendMessage(chatId, '‚ùå –¢–∞—Ä–∏—Ö–Ω–∏ –æ–ª–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏.');
  }
});

// Handle callback queries (inline keyboard)
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  const messageId = callbackQuery.message.message_id;

  // Answer callback query to remove loading indicator
  await bot.answerCallbackQuery(callbackQuery.id);

  try {
    // Handle main menu first
    if (data === 'main_menu') {
      bot.sendMessage(chatId, `
üè† **–ê—Å–æ—Å–∏–π –º–µ–Ω—é**

“ö—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:
      `, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª', callback_data: 'profile' }
            ],
            [
              { text: 'üìã –¢–æ—à—Ä–∏“õ–ª–∞—Ä', callback_data: 'task_history' },
              { text: 'üè¢ “ö–∞–±—É–ª–ª–∞—Ä', callback_data: 'receptions' }
            ],
            [
              { text: 'ü§ù –ú–∞–∂–ª–∏—Å–ª–∞—Ä', callback_data: 'meetings' },
              { text: '‚öôÔ∏è –°–æ–∑–ª–∞–º–∞–ª–∞—Ä', callback_data: 'settings' }
            ]
          ]
        }
      });
      return;
    }

    const employee = await Employee.findOne({ telegramId: chatId.toString() });
    
    if (!employee) {
      bot.sendMessage(chatId, '‚ùå –°–∏–∑ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–≥–∞–Ω—Å–∏–∑. /start –±—É–π—Ä—É“ì–∏–Ω–∏ –±–æ—Å–∏–Ω–≥.');
      return;
    }

    // Handle short-token task view first (vt_<token>)
    if (data.startsWith('vt_')) {
      const token = data.slice(3);
      const tokenMap = chatTaskTokenMap.get(chatId);
      const task = tokenMap ? tokenMap.get(token) : null;
      console.log('[CBQ] vt_ token received', { chatId, token, hasTask: !!task });
      if (!task) {
        await bot.sendMessage(chatId, '‚ùå –¢–æ–ø—à–∏—Ä–∏“õ —Ç–æ–ø–∏–ª–º–∞–¥–∏ —ë–∫–∏ –º—É–¥–¥–∞—Ç–∏ —û—Ç–≥–∞–Ω.');
      } else {
        const assignedDate = task.assignedAt ? new Date(task.assignedAt) : null;
        const deadlineDate = task.deadline ? new Date(task.deadline) : null;
        const statusText = task.status === 'completed' ? '–ë–∞–∂–∞—Ä–∏–ª–≥–∞–Ω' : task.status === 'overdue' ? '–ú—É–¥–¥–∞—Ç–∏ —û—Ç–≥–∞–Ω' : '–ñ–∞—Ä–∞—ë–Ω–¥–∞';
        await bot.sendMessage(chatId, `
üìã **–°–∏–∑–Ω–∏–Ω–≥ —Ç–æ—à—Ä–∏“ì–∏–Ω–≥–∏–∑**

üìù **Tavsif:** ${task.description || '-'}
üìÖ **–ë–µ—Ä–∏–ª–≥–∞–Ω —Å–∞–Ω–∞:** ${assignedDate ? assignedDate.toLocaleDateString('uz-UZ') : '-'}
‚è∞ **–ú—É–¥–¥–∞—Ç:** ${deadlineDate ? deadlineDate.toLocaleDateString('uz-UZ') : '-'}
üìä **–•–æ–ª–∞—Ç:** ${statusText}
üë§ **–ö–∏–º –±–µ—Ä–∏–≥–∞–Ω:** ${task.assignedBy || 'Admin'}
        `, {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: [[{ text: 'üîô –û—Ä“õ–∞–≥–∞', callback_data: 'task_history' }]] }
        });
      }
      return;
    }

    switch(data) {
      case 'profile':
        await handleProfileCommand(chatId, employee);
        break;
      case 'task_history':
        await handleTaskHistoryCommand(chatId, employee);
        break;
      case 'receptions':
        await handleReceptionsCommand(chatId, employee);
        break;
      case 'meetings':
        await handleMeetingsCommand(chatId, employee);
        break;
      case 'settings':
        await handleSettingsCommand(chatId, employee);
        break;
      // Pagination handlers
      case data.match(/^tasks_page_(\d+)$/)?.input:
        const taskPage = parseInt(data.split('_')[2]);
        await handleTaskHistoryCommand(chatId, employee, taskPage, messageId);
        break;
      case data.match(/^receptions_page_(\d+)$/)?.input:
        const receptionPage = parseInt(data.split('_')[2]);
        await handleReceptionsCommand(chatId, employee, receptionPage, messageId);
        break;
      case data.match(/^meetings_page_(\d+)$/)?.input:
          const meetingPage = parseInt(data.split('_')[2]);
          await handleMeetingsCommand(chatId, employee, meetingPage, messageId);
          break;
      // Info handlers (just show current page info)
      case 'tasks_info':
        bot.answerCallbackQuery(callbackQuery.id, { text: '–¢–æ—à—Ä–∏“õ–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ —Å–∞“≥–∏—Ñ–∞—Å–∏' });
        break;
      case 'receptions_info':
        bot.answerCallbackQuery(callbackQuery.id, { text: '“ö–∞–±—É–ª–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ —Å–∞“≥–∏—Ñ–∞—Å–∏' });
        break;
      case 'meetings_info':
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ú–∞–∂–ª–∏—Å–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ —Å–∞“≥–∏—Ñ–∞—Å–∏' });
        break;
      // Inline button handlers
      case data.match(/^view_task_(.+)$/)?.input:
        const viewTaskId = data.split('_')[2];
        await handleViewTask(chatId, employee, viewTaskId);
        break;
      case data.match(/^view_reception_doc_(.+)$/)?.input:
        const viewReceptionDocId = data.split('_')[3];
        await handleViewReception(chatId, employee, viewReceptionDocId);
        break;
      case data.match(/^view_meeting_(.+)$/)?.input:
        const viewMeetingId = data.split('_')[2];
        await handleViewMeeting(chatId, employee, viewMeetingId);
        break;
      default:
        bot.sendMessage(chatId, '‚ùì –ù–æ–º–∞—ä–ª—É–º –±—É–π—Ä—É“õ');
    }
  } catch (error) {
    console.error('Callback query error:', error);
    bot.sendMessage(chatId, '‚ùå –•–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏');
  }
});

// Helper function to update task status based on deadline
function updateTaskStatus(task) {
  const now = new Date();
  const deadline = new Date(task.deadline);
  
  if (task.status === 'completed') {
    return task; // Don't change completed tasks
  }
  
  if (deadline < now) {
    return { ...task, status: 'overdue' };
  }
  
  return task;
}

// Refactored command handlers
async function handleProfileCommand(chatId, employee) {
  // Load freshest employee + reception tasks to reflect real counts
  const fresh = await Employee.findById(employee._id);
  const source = fresh || employee;
  const baseTasks = source?.taskHistory || employee.taskHistory || [];
  let receptionTasks = [];
  try {
    const ReceptionHistory = require('../models/ReceptionHistory');
    const docs = await ReceptionHistory.find({ 'employees.employeeId': employee._id }).limit(200);
    docs.forEach(doc => {
      const emp = doc.employees.find(e => (e.employeeId?.toString() || e._id?.toString()) === employee._id.toString());
      if (emp && emp.task) receptionTasks.push(emp.task);
    });
  } catch (_) {}

  // Combine and count by status
  const allTasksForStats = [...baseTasks, ...receptionTasks];
  const activeTasks = allTasksForStats.filter(t => t.status === 'pending').length;
  const completedTasks = allTasksForStats.filter(t => t.status === 'completed').length;
  const totalTasks = allTasksForStats.length;

  bot.sendMessage(chatId, `
üë§ **–®–∞—Ö—Å–∏–π –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä**

üìù **–ò—Å–º:** ${employee.name}
üè¢ **–õ–∞–≤–æ–∑–∏–º:** ${employee.position}  
üèõÔ∏è **–ë—û–ª–∏–º:** ${employee.department}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${employee.phone}
‚è∞ **–ò—à —Å—Ç–∞–∂–∏:** ${employee.experience} yil
${employee.education ? `üéì **–¢–∞—ä–ª–∏–º:** ${employee.education}` : ''}

üìä **–¢–æ—à—Ä–∏“õ–ª–∞—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫asi:**
‚Ä¢ –§–∞–æ–ª —Ç–æ—à—Ä–∏“õ–ª–∞—Ä: ${activeTasks}
‚Ä¢ –ë–∞–∂–∞—Ä–∏–ª–≥–∞–Ω: ${completedTasks}
‚Ä¢ –ñ–∞–º–∏: ${totalTasks}

üìÖ **–†—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω:** ${employee.createdAt.toLocaleDateString('uz-UZ')}
  `, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }
        ]
      ]
    }
  });
}

async function handleTasksCommand(chatId, employee) {
  const activeTasks = employee.taskHistory ? employee.taskHistory.filter(task => task.status === 'pending') : [];
  
  if (activeTasks.length === 0) {
    bot.sendMessage(chatId, 'üìã –°–∏–∑–¥–∞ “≥–æ–∑–∏—Ä—á–∞ —Ñ–∞–æ–ª —Ç–æ—à—Ä–∏“õ–ª–∞—Ä –π—û“õ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]
        ]
      }
    });
    return;
  }
  
  let message = `üìã **–§–∞–æ–ª —Ç–æ—à—Ä–∏“õ–ª–∞—Ä (${activeTasks.length}):**\n\n`;
  
  activeTasks.forEach((task, index) => {
    const deadline = new Date(task.deadline);
    const daysLeft = Math.ceil((deadline - new Date()) / (1000 * 60 * 60 * 24));
    const priorityEmoji = task.priority === 'urgent' ? 'üî¥' : task.priority === 'high' ? 'üü°' : 'üü¢';
    
    message += `${index + 1}. ${priorityEmoji} **${task.description}**\n`;
    message += `   üìÖ –ú—É–¥–¥–∞—Ç: ${deadline.toLocaleDateString('uz-UZ')}\n`;
    message += `   ‚è∞ “ö–æ–ª–≥–∞–Ω: ${daysLeft > 0 ? `${daysLeft} kun` : '–ú—É–¥–¥–∞—Ç–∏ —û—Ç–≥–∞–Ω'}\n`;
    message += `   üë§ –ö–∏–º –±–µ—Ä–≥–∞–Ω: ${task.assignedBy}\n\n`;
  });
}

async function handleSettingsCommand(chatId, employee) {
  const settings = employee.notificationSettings || {};
  
  bot.sendMessage(chatId, `
‚öôÔ∏è **–•–∞–±–∞—Ä —Å–æ–∑–ª–∞–º–∞–ª–∞—Ä–∏**

üìã **–ñ–æ—Ä–∏–π —Å–æ–∑–ª–∞–º–∞–ª–∞—Ä:**
‚Ä¢ “ö–∞–±—É–ª —Ö–∞–±–∞—Ä–ª–∞—Ä–∏: ${settings.receptionNotification !== false ? '‚úÖ' : '‚ùå'}
‚Ä¢ –ú–∞–∂–ª–∏—Å–ª–∞—Ä —Ö–∞–±–∞—Ä–ª–∞—Ä–∏: ${settings.meetingNotification !== false ? '‚úÖ' : '‚ùå'}
‚Ä¢ –¢–æ—à—Ä–∏“õ–ª–∞—Ä —Ö–∞–±–∞—Ä–ª–∞—Ä–∏: ${settings.taskNotification !== false ? '‚úÖ' : '‚ùå'}
‚Ä¢ –ï—Å–ª–∞—Ç–º–∞ —Ö–∞–±–∞—Ä–ª–∞—Ä–∏: ${settings.reminderNotification !== false ? '‚úÖ' : '‚ùå'}

*–°–æ–∑–ª–∞–º–∞–ª–∞—Ä–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à —É—á—É–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏–Ω–≥*
  `, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]
      ]
    }
  });
}

// Handle unknown commands
bot.on('message', (msg) => {
  if (msg.text && msg.text.startsWith('/') && !msg.text.match(/\/(start|profile|tasks|history|settings)/)) {
    bot.sendMessage(msg.chat.id, `
‚ùì –ù–æ–º–∞—ä–ª—É–º –±—É–π—Ä—É“õ: ${msg.text}

üìã –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞–≥–∞ —û—Ç–∏—à —É—á—É–Ω /start –Ω–∏ –±–æ—Å–∏–Ω–≥.
    `, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]
        ]
      }
    });
  }
});

// New history functions
async function handleTaskHistoryCommand(chatId, employee, page = 1, messageId = null) {
  // Always reload to reflect admin-side updates (e.g., completed)
  const freshEmployee = await Employee.findOne({ telegramId: chatId.toString() });
  const source = freshEmployee || employee;

  // Also load latest reception tasks to sync statuses (admin may update there)
  const unifiedReceptionTasks = [];
  try {
    const ReceptionHistory = require('../models/ReceptionHistory');
    const docs = await ReceptionHistory.find({ 'employees.employeeId': source._id }).limit(200);
    docs.forEach(doc => {
      const emp = doc.employees.find(e => (e.employeeId?.toString() || e._id?.toString()) === source._id.toString());
      if (emp && emp.task) {
        // Normalize to the same shape as employee.taskHistory items
        const assignedAt = emp.task.assignedAt ? new Date(emp.task.assignedAt) : new Date(doc.date || Date.now());
        // Convert deadline: may be a Date (taskHistory) or number of days (reception)
        let deadlineDate = null;
        if (emp.task.deadline instanceof Date || typeof emp.task.deadline === 'string') {
          const d = new Date(emp.task.deadline);
          if (!isNaN(d.getTime())) deadlineDate = d;
        } else if (typeof emp.task.deadline === 'number') {
          deadlineDate = new Date(assignedAt.getTime() + emp.task.deadline * 24 * 60 * 60 * 1000);
        }
        unifiedReceptionTasks.push({
          _id: `reception_${doc._id}_${emp._id}`,
          description: emp.task.description,
          deadline: deadlineDate,
          assignedAt,
          assignedBy: emp.task.assignedBy || 'Admin',
          status: emp.task.status || 'pending',
          source: 'reception'
        });
      }
    });
  } catch (_) {}

  // For history view, we ONLY show tasks assigned via reception
  if (unifiedReceptionTasks.length === 0) {
    if (messageId) {
      bot.editMessageText('üìã –¢–æ—à—Ä–∏“õ–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ –±—û—à.', {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]
          ]
        }
      });
    } else {
      bot.sendMessage(chatId, 'üìã –¢–æ—à—Ä–∏“õ–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ –±—û—à.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]
          ]
        }
      });
    }
    return;
  }
  
  // Deduplicate by description+assignedAt timestamp
  const mergedTasks = [...unifiedReceptionTasks];
  const seen = new Set();
  const mergedUnique = mergedTasks.filter(t => {
    const key = `${t.description || ''}_${new Date(t.assignedAt || t.deadline || 0).getTime()}`;
    if (seen.has(key)) return false;
    seen.add(key);
    return true;
  });

  const allTasks = mergedUnique
    .map(task => updateTaskStatus(task))
    // Sort by most recent deadline first; fallback to assignedAt/createdAt
    .sort((a, b) => {
      const aTime = new Date(a.deadline || a.assignedAt || a.createdAt || 0).getTime();
      const bTime = new Date(b.deadline || b.assignedAt || b.createdAt || 0).getTime();
      return bTime - aTime;
    });
  
  const itemsPerPage = 5;
  const totalPages = Math.ceil(allTasks.length / itemsPerPage);
  const startIndex = (page - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const recentTasks = allTasks.slice(startIndex, endIndex);
  
  let message = `üìã **–¢–æ–ø—à–∏—Ä–∏“õ–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ (${page}/${totalPages}):**\n\n`;
  
  // Build short-token map per chat to avoid long callback_data
  let tokenMap = chatTaskTokenMap.get(chatId);
  if (!tokenMap) {
    tokenMap = new Map();
    chatTaskTokenMap.set(chatId, tokenMap);
  }
  // Reset for this render
  tokenMap.clear();
  
  // Inline buttons for each task - soddalashtirilgan
  const keyboard = [];
  
  recentTasks.forEach((task, index) => {
    const statusEmoji = task.status === 'completed' ? '‚úÖ' : task.status === 'overdue' ? '‚ùå' : '‚è≥';
    const displayDateRaw = task.assignedAt || task.deadline || task.createdAt;
    const displayDate = displayDateRaw ? new Date(displayDateRaw).toLocaleDateString('uz-UZ') : '-';
    const taskIndex = startIndex + index;
    
    const statusText = task.status === 'completed' ? '–ë–∞–∂–∞—Ä–∏–ª–≥–∞–Ω' : task.status === 'overdue' ? '–ú—É–¥–¥–∞—Ç–∏ —û—Ç–≥–∞–Ω' : '–ñ–∞—Ä–∞—ë–Ω–¥–∞';
    const taskButton = `${startIndex + index + 1}. ${statusEmoji} ${displayDate} - ${statusText}`;
    const token = `t${taskIndex}`;
    tokenMap.set(token, task);
    keyboard.push([{ text: taskButton, callback_data: `vt_${token}` }]);
  });
  
  if (totalPages > 1) {
    const paginationRow = [];
    if (page > 1) {
      paginationRow.push({ text: '‚óÄÔ∏è', callback_data: `tasks_page_${page - 1}` });
    }
    paginationRow.push({ text: `${page}/${totalPages}`, callback_data: 'tasks_info' });
    if (page < totalPages) {
      paginationRow.push({ text: '‚ñ∂Ô∏è', callback_data: `tasks_page_${page + 1}` });
    }
    keyboard.push(paginationRow);
  }
  keyboard.push([{ text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]);
  
  if (messageId) {
    // Mavjud xabarni yangilash
    try {
      await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    } catch (error) {
      console.error('Xabarni yangilashda xatolik:', error);
      // Agar xabar yangilanmasa, yangi xabar yuborish
      bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    }
  } else {
    // Yangi xabar yuborish
    bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  }
}

async function handleReceptionsCommand(chatId, employee, page = 1, messageId = null) {
  try {
    const ReceptionHistory = require('../models/ReceptionHistory');
    // Load latest receptions where this employee participated
    const docs = await ReceptionHistory.find({ 'employees.employeeId': employee._id })
      .sort({ date: -1 })
      .limit(100); // limit to reasonable recent history

    if (!docs || docs.length === 0) {
      if (messageId) {
        bot.editMessageText('üè¢ “ö–∞–±—É–ª–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ –±—û—à.', {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: [[{ text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]] }
        });
      } else {
        bot.sendMessage(chatId, 'üè¢ “ö–∞–±—É–ª–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ –±—û—à.', {
          reply_markup: { inline_keyboard: [[{ text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]] }
        });
      }
      return;
    }

    // Flatten receptions with employee-specific status/time
    const allReceptions = [];
    docs.forEach(doc => {
      const emp = doc.employees.find(e => (e.employeeId?.toString() || e._id?.toString()) === employee._id.toString());
      if (emp) {
        allReceptions.push({
          docId: doc._id.toString(),
          date: doc.date,
          status: emp.status || 'waiting',
          time: emp.scheduledTime || emp.time || '‚Äî'
        });
      }
    });

    const itemsPerPage = 5;
    const totalPages = Math.ceil(allReceptions.length / itemsPerPage);
    const startIndex = (page - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const recentReceptions = allReceptions.slice(startIndex, endIndex);

    let message = `üè¢ **“ö–∞–±—É–ª–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ (${page}/${totalPages}):**\n\n`;
    const keyboard = [];

    recentReceptions.forEach((r, index) => {
      const statusEmoji = r.status === 'present' ? '‚úÖ' : r.status === 'absent' ? '‚ùå' : '‚è≥';
      const receptionDate = r.date ? new Date(r.date) : null;
      const labelDate = receptionDate ? receptionDate.toLocaleDateString('uz-UZ') : '-';
      const timeLabel = r.time && r.time !== '‚Äî' ? ` ${r.time}` : '';
      const btn = `${startIndex + index + 1}. ${statusEmoji} ${labelDate}${timeLabel} - ${r.status === 'present' ? '–ö–µ–ª–¥–∏' : r.status === 'absent' ? '–ö–µ–ª–º–∞–¥–∏' : '–ö—É—Ç–∏–ª–º–æ“õ–¥–∞'}`;
      keyboard.push([{ text: btn, callback_data: `view_reception_doc_${r.docId}` }]);
    });

    if (totalPages > 1) {
      const paginationRow = [];
      if (page > 1) paginationRow.push({ text: '‚óÄÔ∏è', callback_data: `receptions_page_${page - 1}` });
      paginationRow.push({ text: `${page}/${totalPages}`, callback_data: 'receptions_info' });
      if (page < totalPages) paginationRow.push({ text: '‚ñ∂Ô∏è', callback_data: `receptions_page_${page + 1}` });
      keyboard.push(paginationRow);
    }
    keyboard.push([{ text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]);

    if (messageId) {
      // Mavjud xabarni yangilash
      try {
        await bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: keyboard }
        });
      } catch (error) {
        console.error('Xabarni yangilashda xatolik:', error);
        // Agar xabar yangilanmasa, yangi xabar yuborish
        bot.sendMessage(chatId, message, {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: keyboard }
        });
      }
    } else {
      // Yangi xabar yuborish
      bot.sendMessage(chatId, message, { parse_mode: 'Markdown', reply_markup: { inline_keyboard: keyboard } });
    }
  } catch (err) {
    console.error('Receptions history load error:', err);
    bot.sendMessage(chatId, '‚ùå “ö–∞–±—É–ª–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏–Ω–∏ —é–∫–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫.');
  }
}

async function handleMeetingsCommand(chatId, employee, page = 1, messageId = null) {
  if (!employee.meetingHistory || employee.meetingHistory.length === 0) {
    if (messageId) {
      bot.editMessageText('ü§ù –ú–∞–∂–ª–∏—Å–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ –±—û—à.', {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]
          ]
        }
      });
    } else {
      bot.sendMessage(chatId, 'ü§ù –ú–∞–∂–ª–∏—Å–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ –±—û—à.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]
          ]
        }
      });
    }
    return;
  }
  
  try {
    // OPTIMIZED: Populate meeting details from Meeting collection
    const Employee = require('../models/Employee');
    const populatedEmployee = await Employee.findById(employee._id)
      .populate({
        path: 'meetingHistory.meetingId',
        select: 'name date time location description'
      });
    
    if (!populatedEmployee || !populatedEmployee.meetingHistory) {
      throw new Error('Failed to load meeting details');
    }
    
    let allMeetings = populatedEmployee.meetingHistory
      .filter(m => m.meetingId) // Only show
      .sort((a, b) => new Date(b.joinedAt || b.createdAt) - new Date(a.joinedAt || a.createdAt));
    
    const itemsPerPage = 5;
    const totalPages = Math.ceil(allMeetings.length / itemsPerPage);
    const startIndex = (page - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const recentMeetings = allMeetings.slice(startIndex, endIndex);
    
    let message = `ü§ù **–ú–∞–∂–ª–∏—Å–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏ (${page}/${totalPages}):**\n\n`;
    
    // Inline buttons for each meeting - soddalashtirilgan
    const keyboard = [];
    
    recentMeetings.forEach((meetingHistory, index) => {
      const meeting = meetingHistory.meetingId; // Populated meeting data
      const statusEmoji = meetingHistory.status === 'attended' ? '‚úÖ' : meetingHistory.status === 'missed' ? '‚ùå' : 'üìß';
      const meetingDate = new Date(meeting.date);
      const meetingIndex = startIndex + index;
      
      // Meeting button with date and status
      const meetingButton = `${startIndex + index + 1}. ${statusEmoji} ${meetingDate.toLocaleDateString('uz-UZ')} - ${meetingHistory.status === 'attended' ? '“ö–∞—Ç–Ω–∞—à–≥–∞–Ω' : meetingHistory.status === 'missed' ? '“ö–∞—Ç–Ω–∞—à–º–∞–≥–∞–Ω' : '–¢–∞–∫–ª–∏—Ñ —ç—Ç–∏–ª–≥–∞–Ω'}`;
      keyboard.push([{ text: meetingButton, callback_data: `view_meeting_${meeting._id || meetingIndex}` }]);
    });
    
    // Pagination buttons
    if (totalPages > 1) {
      const paginationRow = [];
      if (page > 1) {
        paginationRow.push({ text: '‚óÄÔ∏è', callback_data: `meetings_page_${page - 1}` });
      }
      paginationRow.push({ text: `${page}/${totalPages}`, callback_data: 'meetings_info' });
      if (page < totalPages) {
        paginationRow.push({ text: '‚ñ∂Ô∏è', callback_data: `meetings_page_${page + 1}` });
      }
      keyboard.push(paginationRow);
    }
    keyboard.push([{ text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]);
    
    if (messageId) {
      // Mavjud xabarni yangilash
      try {
        await bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: keyboard
          }
        });
      } catch (error) {
        console.error('Xabarni yangilashda xatolik:', error);
        // Agar xabar yangilanmasa, yangi xabar yuborish
        bot.sendMessage(chatId, message, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: keyboard
          }
        });
      }
    } else {
      // Yangi xabar yuborish
      bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    }
    
  } catch (error) {
    console.error('Error loading meeting history:', error);
    bot.sendMessage(chatId, '‚ùå –ú–∞–∂–ª–∏—Å–ª–∞—Ä —Ç–∞—Ä–∏—Ö–∏–Ω–∏ —é–∫–ª–∞—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ê—Å–æ—Å–∏–π —Å–∞“≥–∏—Ñ–∞', callback_data: 'main_menu' }]
        ]
      }
    });
  }
}

// Inline button handlers
async function handleViewTask(chatId, employee, taskId) {
  try {
    // User faqat o'z topshiriqlarini ko'radi
    const task = employee.taskHistory.find(t => t._id?.toString() === taskId || t.id?.toString() === taskId);
    if (!task) {
      bot.sendMessage(chatId, '‚ùå –°–∏–∑–Ω–∏–Ω–≥ —Ç–æ—à—Ä–∏“ì–∏–Ω–≥–∏–∑ —Ç–æ–ø–∏–ª–º–∞–¥–∏');
      return;
    }
    
    const assignedDate = new Date(task.assignedAt);
    const deadlineDate = new Date(task.deadline);
    const statusText = task.status === 'completed' ? '–ë–∞–∂–∞—Ä–∏–ª–≥–∞–Ω' : 
                      task.status === 'overdue' ? '–ú—É–¥–¥–∞—Ç–∏ —û—Ç–≥–∞–Ω' : '–ñ–∞—Ä–∞—ë–Ω–¥–∞';
    
    bot.sendMessage(chatId, `
üìã **–°–∏–∑–Ω–∏–Ω–≥ —Ç–æ—à—Ä–∏“ì–∏–Ω–≥–∏–∑**

üìù **Ta–≤—Å–∏—Ñ–∏:** ${task.description}
üìÖ **Berilgan sana:** ${assignedDate.toLocaleDateString('uz-UZ')}
‚è∞ **–ú—É–¥–¥–∞—Ç:** ${deadlineDate.toLocaleDateString('uz-UZ')}
üìä **“≤–æ–ª–∞—Ç:** ${statusText}
üë§ **–ö–∏–º –±–µ—Ä–≥–∞–Ω:** ${task.assignedBy}
${task.completedAt ? `‚úÖ **–ë–∞–∂–∞—Ä–∏–ª–≥–∞–Ω:** ${new Date(task.completedAt).toLocaleDateString('uz-UZ')}` : ''}
    `, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –û—Ä“õ–∞–≥–∞', callback_data: 'task_history' }]
        ]
      }
    });
  } catch (error) {
    console.error('View task error:', error);
    bot.sendMessage(chatId, '‚ùå –¢–æ—à—Ä–∏“õ–Ω–∏ –∫—û—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫');
  }
}

async function handleViewReception(chatId, employee, receptionDocId) {
  try {
    const ReceptionHistory = require('../models/ReceptionHistory');
    const doc = await ReceptionHistory.findById(receptionDocId);
    if (!doc) {
      bot.sendMessage(chatId, '‚ùå “ö–∞–±—É–ª —Ç–æ–ø–∏–ª–º–∞–¥–∏');
      return;
    }
    const emp = doc.employees.find(e => (e.employeeId?.toString() || e._id?.toString()) === employee._id.toString());
    if (!emp) {
      bot.sendMessage(chatId, '‚ùå –°–∏–∑–Ω–∏–Ω–≥ “õ–∞–±—É–ª–∏–Ω–≥–∏–∑ —Ç–æ–ø–∏–ª–º–∞–¥–∏');
      return;
    }
    const receptionDate = doc.date ? new Date(doc.date) : null;
    const currentStatus = emp.status || 'waiting';
    const statusText = currentStatus === 'present' ? '–ö–µ–ª–¥–∏' : currentStatus === 'absent' ? '–ö–µ–ª–º–∞–¥–∏' : '–ö—É—Ç–∏–ª–º–æ“õ–¥–∞';
    const timeText = emp.scheduledTime || emp.time || '-';
    
    let message = `üè¢ **–°–∏–∑–Ω–∏–Ω–≥ “õ–∞–±—É–ª–∏–Ω–≥–∏–∑**\n\n`;
    message += `üìÖ **–°–∞–Ω–∞:** ${receptionDate ? receptionDate.toLocaleDateString('uz-UZ') : '-'}\n`;
    message += `‚è∞ **–í–∞“õ—Ç:** ${timeText}\n`;
    message += `üìä **“≤–æ–ª–∞—Ç:** ${statusText}\n`;
    
    if (currentStatus === 'present' && emp.task) {
      message += `\nüìã **–ë–µ—Ä–∏–ª–≥–∞–Ω –≤–∞–∑–∏—Ñ–∞:**\n`;
      message += `üìù **Ta–≤—Å–∏—Ñ–∏:** ${emp.task.description}\n`;
      message += `‚è∞ **–ú—É–¥–¥–∞—Ç:** ${emp.task.deadline} kun\n`;
      message += `üë§ **–ö–∏–º –±–µ—Ä–≥–∞–Ω:** ${emp.task.assignedBy}\n`;
    } else if (currentStatus === 'absent') {
      message += `\n‚ùå **–°–∏–∑ “õ–∞–±—É–ª–≥–∞ –∫–µ–ª–º–∞–¥–∏–Ω–≥–∏–∑**\n`;
    }
    
    if (emp.notes) {
      message += `\nüìù **–ò–∑–æ“≥:** ${emp.notes}`;
    }
    
    bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –û—Ä“õ–∞–≥–∞', callback_data: 'receptions' }]
        ]
      }
    });
  } catch (error) {
    console.error('View reception error:', error);
    bot.sendMessage(chatId, '‚ùå “ö–∞–±—É–ª–Ω–∏ –∫—û—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫');
  }
}

async function handleViewMeeting(chatId, employee, meetingId) {
  try {
    // Reload to ensure freshest data
    const freshEmployee = await Employee.findOne({ telegramId: chatId.toString() }).populate({ path: 'meetingHistory.meetingId' });
    const source = freshEmployee || employee;

    const meetingHistory = source.meetingHistory.find(m => m.meetingId?._id?.toString() === meetingId);
    if (!meetingHistory) {
      bot.sendMessage(chatId, '‚ùå –°–∏–∑–Ω–∏–Ω–≥ –º–∞–∂–ª–∏—Å–∏–Ω–≥–∏–∑ —Ç–æ–ø–∏–ª–º–∞–¥–∏');
      return;
    }
    
    const meeting = meetingHistory.meetingId || {};
    const meetingDateObj = meeting.date ? new Date(meeting.date) : null;
    const statusText = meetingHistory.status === 'attended' ? '“ö–∞—Ç–Ω–∞—à–≥–∞–Ω' : 
                      meetingHistory.status === 'missed' ? '“ö–∞—Ç–Ω–∞—à–º–∞–≥–∞–Ω' : '–¢–∞–∫–ª–∏—Ñ —ç—Ç–∏–ª–≥–∞–Ω';
    const name = meeting.name || '-';
    const dateText = meetingDateObj ? meetingDateObj.toLocaleDateString('uz-UZ') : '-';
    const timeText = meeting.time || '-';
    const locationText = meeting.location || '–ë–µ–ª–≥–∏–ª–∞–Ω–º–∞–≥–∞–Ω';
    const descText = meeting.description ? `üìÑ **Ta–≤—Å–∏—Ñ–∏:** ${meeting.description}` : '';
    const notesText = meetingHistory.notes ? `üìù **–≠—Å–ª–∞—Ç–∞–º–∞:** ${meetingHistory.notes}` : '';
    
    bot.sendMessage(chatId, `
ü§ù **–°–∏–∑–Ω–∏–Ω–≥ –º–∞–∂–ª–∏—Å–∏–Ω–≥–∏–∑**

üìù **–ù–æ–º–∏:** ${name}
üìÖ **–°–∞–Ω–∞:** ${dateText}
‚è∞ **–í–∞“õ—Ç:** ${timeText}
üìç **–ñ–æ–π:** ${locationText}
üìä **“≤–æ–ª–∞—Ç:** ${statusText}
${descText}
${notesText}
    `, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –û—Ä“õ–∞–≥–∞', callback_data: 'meetings' }]
        ]
      }
    });
  } catch (error) {
    console.error('View meeting error:', error);
    bot.sendMessage(chatId, '‚ùå –ú–∞–∂–ª–∏—Å–Ω–∏ –∫—û—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫');
  }
}

// Make notification service globally available
global.telegramNotificationService = notificationService;

// Export bot for use in other modules
module.exports = { bot, notificationService };